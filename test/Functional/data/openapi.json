{
    "openapi": "3.0.0",
    "info": {
        "title": "Order API",
        "version": "1.0"
    },
    "servers": [
        {
            "url": "http://test.localdomain:80",
            "description": "Local DEV"
        }
    ],
    "paths": {
        "/order/create": {
            "post": {
                "tags": [
                    "Order"
                ],
                "description": "Creates the given order",
                "operationId": "createOrder",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/OrderCreateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful creation"
                    },
                    "400": {
                        "description": "Bad request, the request parameters are invalid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error400"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "The authenticated user has no permission for this operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error403"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/order/cancel": {
            "post": {
                "tags": [
                    "Order"
                ],
                "description": "Cancels the given order",
                "operationId": "cancelOrder",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/OrderCancelRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful cancel"
                    },
                    "400": {
                        "description": "Bad request, the request parameters are invalid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error400"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "The authenticated user has no permission for this operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error403"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "OrderCustomerRequest": {
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "description": "Name of the customer",
                        "type": "string"
                    },
                    "phone": {
                        "description": "Phone number of the customer",
                        "type": "string"
                    },
                    "email": {
                        "description": "Email number of the customer",
                        "type": "string"
                    },
                    "note": {
                        "description": "Note from the customer about the order",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "OrderFulfillmentRequest": {
                "required": [
                    "mode",
                    "schedulingType",
                    "expectedAt"
                ],
                "properties": {
                    "mode": {
                        "type": "string",
                        "enum": [
                            "delivery",
                            "dineIn",
                            "pickup",
                            "restaurantDelivery"
                        ]
                    },
                    "schedulingType": {
                        "type": "string",
                        "enum": [
                            "asap",
                            "fixed"
                        ]
                    },
                    "expectedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "courier": {
                        "$ref": "#/components/schemas/OrderFulfillmentCourierRequest"
                    },
                    "delivery": {
                        "$ref": "#/components/schemas/OrderFulfillmentDeliveryRequest"
                    },
                    "employee": {
                        "$ref": "#/components/schemas/OrderFulfillmentEmployeeRequest"
                    },
                    "table": {
                        "$ref": "#/components/schemas/OrderFulfillmentTableRequest"
                    }
                },
                "type": "object"
            },
            "OrderFulfillmentCourierRequest": {
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "description": "Name of the courier",
                        "type": "string"
                    },
                    "phone": {
                        "description": "Phone number of the courier",
                        "type": "string"
                    },
                    "email": {
                        "description": "Email address of the courier",
                        "type": "string"
                    },
                    "licensePlate": {
                        "description": "License plate number of the couriers vehicle",
                        "type": "string"
                    },
                    "makeModel": {
                        "description": "Make and model of the couriers vehicle",
                        "type": "string"
                    },
                    "lastKnownLocation": {
                        "$ref": "#/components/schemas/OrderLocationRequest"
                    }
                },
                "type": "object"
            },
            "OrderFulfillmentDeliveryRequest": {
                "properties": {
                    "address": {
                        "description": "First line of address",
                        "type": "string"
                    },
                    "address2": {
                        "description": "Second line of address",
                        "type": "string"
                    },
                    "postalCode": {
                        "description": "Postal code",
                        "type": "string"
                    },
                    "city": {
                        "description": "City name",
                        "type": "string"
                    },
                    "state": {
                        "description": "State name",
                        "type": "string"
                    },
                    "countryCode": {
                        "description": "CLDR Code of the country",
                        "type": "string"
                    },
                    "note": {
                        "description": "Extra note",
                        "type": "string"
                    },
                    "location": {
                        "$ref": "#/components/schemas/OrderLocationRequest"
                    }
                },
                "type": "object"
            },
            "OrderFulfillmentEmployeeRequest": {
                "description": "Details of the employee who processed the order",
                "properties": {
                    "id": {
                        "description": "Id of the employee",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the employee",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "OrderFulfillmentTableRequest": {
                "description": "Details of the table the food will be served to",
                "properties": {
                    "id": {
                        "description": "Id of the table",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the table",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "OrderLocationRequest": {
                "required": [
                    "latitude",
                    "longitude"
                ],
                "properties": {
                    "latitude": {
                        "description": "The latitude of the location.",
                        "type": "number",
                        "format": "float"
                    },
                    "longitude": {
                        "description": "The longitude of the location.",
                        "type": "number",
                        "format": "float"
                    }
                },
                "type": "object"
            },
            "OrderCancelRequest": {
                "required": [
                    "orderId",
                    "sourceSystem"
                ],
                "properties": {
                    "orderId": {
                        "description": "Id of the order in the source system",
                        "type": "string"
                    },
                    "sourceSystem": {
                        "$ref": "#/components/schemas/OrderSourceSystemRequest"
                    }
                },
                "type": "object"
            },
            "OrderCreateRequest": {
                "required": [
                    "orderId",
                    "currencyCode",
                    "sourceSystem",
                    "products",
                    "fulfillment",
                    "orderStatus"
                ],
                "properties": {
                    "friendlyId": {
                        "description": "Human readable id of the order",
                        "type": "string"
                    },
                    "currencyCode": {
                        "description": "Currency of the payment and prices",
                        "type": "string"
                    },
                    "customer": {
                        "$ref": "#/components/schemas/OrderCustomerRequest"
                    },
                    "products": {
                        "description": "Ordered products",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/OrderProductRequest"
                        }
                    },
                    "fulfillment": {
                        "$ref": "#/components/schemas/OrderFulfillmentRequest"
                    },
                    "payment": {
                        "$ref": "#/components/schemas/OrderPaymentRequest"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "orderStatus": {
                        "$ref": "#/components/schemas/OrderStatus"
                    },
                    "orderId": {
                        "description": "Id of the order in the source system",
                        "type": "string"
                    },
                    "sourceSystem": {
                        "$ref": "#/components/schemas/OrderSourceSystemRequest"
                    }
                },
                "type": "object"
            },
            "OrderStatus": {
                "required": [
                    "status"
                ],
                "properties": {
                    "closedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "new",
                            "voided",
                            "closed"
                        ]
                    }
                },
                "type": "object"
            },
            "OrderPaymentRequest": {
                "required": [
                    "total"
                ],
                "properties": {
                    "total": {
                        "description": "Total amount paid by the customer",
                        "type": "number",
                        "format": "float"
                    },
                    "discount": {
                        "description": "Amount of discount",
                        "type": "number",
                        "format": "float"
                    },
                    "extraCharges": {
                        "description": "Extra charge",
                        "type": "number",
                        "format": "float"
                    },
                    "tax": {
                        "description": "Tax",
                        "type": "number",
                        "format": "float"
                    },
                    "tip": {
                        "description": "Tip",
                        "type": "number",
                        "format": "float"
                    },
                    "deliveryFee": {
                        "description": "Delivery Fee",
                        "type": "number",
                        "format": "float"
                    },
                    "couponCode": {
                        "description": "Coupon Code",
                        "type": "string"
                    },
                    "transactions": {
                        "description": "Payments",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/OrderPaymentTransactionRequest"
                        }
                    },
                    "startedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "completedAt": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "OrderPaymentTransactionRequest": {
                "required": [
                    "amount",
                    "method",
                    "status"
                ],
                "properties": {
                    "amount": {
                        "description": "Amount paid",
                        "type": "number",
                        "format": "float"
                    },
                    "method": {
                        "type": "string",
                        "enum": [
                            "cash",
                            "card"
                        ]
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "collectable",
                            "processed"
                        ]
                    }
                },
                "type": "object"
            },
            "OrderProductRequest": {
                "required": [
                    "name",
                    "productId"
                ],
                "properties": {
                    "name": {
                        "description": "Name of the extra",
                        "type": "string"
                    },
                    "productId": {
                        "description": "Id of the extra product",
                        "type": "string"
                    },
                    "unitPrice": {
                        "description": "Price per unit",
                        "type": "number",
                        "format": "float"
                    },
                    "quantity": {
                        "description": "Quantity",
                        "type": "integer"
                    },
                    "note": {
                        "description": "Quantity",
                        "type": "string"
                    },
                    "extras": {
                        "description": "Extras added",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/OrderProductExtraRequest"
                        }
                    }
                },
                "type": "object"
            },
            "OrderProductExtraRequest": {
                "required": [
                    "name",
                    "productId"
                ],
                "properties": {
                    "name": {
                        "description": "Name of the extra",
                        "type": "string"
                    },
                    "productId": {
                        "description": "Id of the extra product",
                        "type": "string"
                    },
                    "unitPrice": {
                        "description": "Price per unit",
                        "type": "number",
                        "format": "float"
                    },
                    "quantity": {
                        "description": "Quantity",
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "OrderSourceSystemRequest": {
                "required": [
                    "accountId",
                    "name",
                    "pushDeadline",
                    "successCallbackUrl",
                    "failedCallbackUrl"
                ],
                "properties": {
                    "accountId": {
                        "description": "Id of the source account",
                        "type": "integer"
                    },
                    "name": {
                        "description": "Name of the food system the request comes from",
                        "type": "string"
                    },
                    "pushDeadline": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "successCallbackUrl": {
                        "description": "Url of the caller service what will be called once the order has been pushed successfully",
                        "type": "string"
                    },
                    "failedCallbackUrl": {
                        "description": "Url of the caller service what will be called if we failed to push the order",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "OrderUpsertEvent": {
                "required": [
                    "version",
                    "accountId",
                    "order"
                ],
                "properties": {
                    "version": {
                        "description": "The version of the entity. The format is v1, v2, etc",
                        "type": "string"
                    },
                    "accountId": {
                        "description": "ID of the account that owns this entity",
                        "type": "integer"
                    },
                    "action": {
                        "description": "The action this entity describes",
                        "type": "string",
                        "enum": [
                            "create",
                            "update",
                            "cancel"
                        ]
                    },
                    "order": {
                        "description": "Details of the order. The type depends on the action",
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "Error400": {
                "properties": {
                    "errorCode": {
                        "type": "string",
                        "description": "The code of the error"
                    },
                    "errorMessage": {
                        "type": "string",
                        "description": "Description of the error"
                    },
                    "params": {
                        "type": "object",
                        "description": "List of the invalid params where the property is the parameter name and the value is the describing the issue"
                    }
                },
                "type": "object"
            },
            "Error403": {
                "properties": {
                    "errorCode": {
                        "type": "string",
                        "description": "The code of the error"
                    },
                    "errorMessage": {
                        "type": "string",
                        "description": "Description of the error"
                    }
                },
                "type": "object"
            }
        },
        "securitySchemes": {
            "api_key": {
                "type": "apiKey",
                "name": "X-API-KEY",
                "in": "header"
            }
        }
    },
    "security": [
        {
            "api_key": []
        }
    ]
}
